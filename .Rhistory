labels <- c(`Low expression` = "Cryptic", `High expression` = "Active")
g <- g + facet_wrap(.~expression, labeller = labels)
}
g <- g + ggtitle('Splice sites') + theme(plot.title = element_text(hjust = 0.5))
g
}
p <- PlotSpliceSites(counts.all, what. = what, bin = 'energy.bin', colors. = energy.colors, shuffle, expression = expression)
p
PlotSpliceSites <- function(counts.all, what. = 'introns', bin = 'energy.bin', colors. = energy.colors, shuffle, expression = F){
if(expression){
tmp <- merge(subset(counts.all, experiment.type == 'real'),
subset(counts.all, experiment.type != 'real'),
by = c('intersection.type', bin, 'expression'))
} else{
tmp <- merge(subset(counts.all, experiment.type == 'real'),
subset(counts.all, experiment.type != 'real'),
by = c('intersection.type', bin))
}
tmp$ratio <- tmp$counts.x / tmp$counts.y
title. <-  if(shuffle == 'phs') 'Random shift' else 'Random gene'
fill.colors. <- adjustcolor(colors., alpha.f = 0.8)
names(fill.colors.) <- names(colors.)
g <- ggplot(tmp, aes(y = ratio)) +
geom_boxplot(aes(fill = get(bin)), outlier.shape = NA,  col = 'black') +
theme_linedraw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(text = element_text(size = 22),
axis.text.x = element_text(size = 17)) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
theme(strip.background = element_rect(color="black",
fill='white',
size=1.5, linetype="solid")) +
theme(strip.text.x = element_text(size = 17, color = "black")) +
theme(axis.title.x = element_blank()) +
ylab('enrichment in CCR') +
geom_hline(yintercept = 1, col = 'darkred', linetype = "dashed") +
#theme(legend.position = c(0.2,0.8), plot.margin = margin(0,10,0,0))
theme(legend.position = 'none')
#theme(legend.position = c(0.8,0.8), plot.margin = margin(0,10,0,0))
if(bin == 'energy.bin'){
g <- g +
scale_color_manual(values = colors., name = '\u0394G, kcal/mol') +
scale_fill_manual(values = fill.colors., name = '\u0394G, kcal/mol')
} else if(bin == 'spread.bin'){
g <- g +
scale_color_manual(values = colors., name = 'spread, nts') +
scale_fill_manual(values = fill.colors., name = 'spread, nts')
} else if(bin == 'E-value.bin'){
g <- g +
scale_color_manual(values = colors., name = 'e-value') +
scale_fill_manual(values = fill.colors., name = 'e-value')
}
if(expression){
g <- g + facet_wrap(.~expression)
}
g <- g + ggtitle('Splice sites') + theme(plot.title = element_text(hjust = 0.5))
g
}
cutoff.level = 0.02
dt <- fread(paste0(path.to.ph, 'phs_', what, '_shuffle_', shuffle, '_db_', db, '_position.tsv'))
phs.dt <- fread(phs)
dt <- ProcessSS(dt, phs.dt, evals, cutoff.level = cutoff.level, expression = expression)
dt <- dt[!duplicated(dt[, c('ph.id', 'intersection.type', 'experiment.type'), with = F]), ]
dt.energy <- MakeCategoriesMutExc(dt = dt, what = 'energy', categories = energy.cutoffs, strict = F)
dt.energy$energy.bin <- paste('<=', dt.energy$energy.bin, sep = '')
dt.energy$energy.bin <- factor(dt.energy$energy.bin)
if(expression){
dt2 <- dt.energy[, c('ph.id', 'counts', 'intersection.type', 'experiment.type', 'energy.bin', 'expression'), with = F]
counts.all <- as.data.table(aggregate(counts ~ experiment.type + intersection.type + energy.bin + expression, data = dt2, FUN = sum))
} else{
dt2 <- dt.energy[, c('ph.id', 'counts', 'intersection.type', 'experiment.type', 'energy.bin'), with = F]
counts.all <- as.data.table(aggregate(counts ~ experiment.type + intersection.type + energy.bin, data = dt2, FUN = sum))
}
p <- PlotSpliceSites(counts.all, what. = what, bin = 'energy.bin', colors. = energy.colors, shuffle, expression = expression)
print(p)
expression
dt2
dt.energy
ProcessSS <- function(dt, phs.dt, evals, cutoff.level = 0.02, expression = F){
dt$id <- as.character(str_split_fixed(dt$ph.id, '_', 3)[, 1])
dt$energy <- as.numeric(str_split_fixed(dt$ph.id, '_', 3)[, 2])
evals.dt <- fread(evals)
evals.dt$id <- as.character(evals.dt$id)
dt <- merge(dt, evals.dt, by = 'id', all.x = T)
phs.dt[, spread := panhandle_right_hand - panhandle_left_hand]
phs.dt$id <- as.character(phs.dt$id)
dt <- merge(dt, phs.dt[, c('id', 'spread'), with = F], by = 'id')
if(expression){
site.expression <- dt[, .(intervals.id, counts)]
site.expression <- site.expression[!duplicated(site.expression)]
site.expression <- site.expression[order(counts)]
site.expression[c(1:round(cutoff.level*nrow(site.expression))), expression := 'Cryptic']
site.expression[c((round((1-cutoff.level)*nrow(site.expression)) + 1):nrow(site.expression)), expression := 'Active']
site.expression <- site.expression[!is.na(expression)]
dt <- merge(dt, site.expression, by = c('intervals.id', 'counts'), all = F)
}
dt
}
dt <- fread(paste0(path.to.ph, 'phs_', what, '_shuffle_', shuffle, '_db_', db, '_position.tsv'))
dt <- ProcessSS(dt, phs.dt, evals, cutoff.level = cutoff.level, expression = expression)
dt <- dt[!duplicated(dt[, c('ph.id', 'intersection.type', 'experiment.type'), with = F]), ]
dt.energy <- MakeCategoriesMutExc(dt = dt, what = 'energy', categories = energy.cutoffs, strict = F)
dt.energy$energy.bin <- paste('<=', dt.energy$energy.bin, sep = '')
dt.energy$energy.bin <- factor(dt.energy$energy.bin)
if(expression){
dt2 <- dt.energy[, c('ph.id', 'counts', 'intersection.type', 'experiment.type', 'energy.bin', 'expression'), with = F]
counts.all <- as.data.table(aggregate(counts ~ experiment.type + intersection.type + energy.bin + expression, data = dt2, FUN = sum))
} else{
dt2 <- dt.energy[, c('ph.id', 'counts', 'intersection.type', 'experiment.type', 'energy.bin'), with = F]
counts.all <- as.data.table(aggregate(counts ~ experiment.type + intersection.type + energy.bin, data = dt2, FUN = sum))
}
p <- PlotSpliceSites(counts.all, what. = what, bin = 'energy.bin', colors. = energy.colors, shuffle, expression = expression)
print(p)
write.table(counts.all, paste0('intersection_', what,  '_shuffle_', shuffle, '_', N.shuffle, '_db_', db, '_cutoff_energy.tsv'), sep = '\t', row.names = F)
cairo_pdf(paste0('intersection_', what, '_shuffle_', shuffle, '_',  as.character(N.shuffle), '_db_', db, '_energy_cutoffs', '.pdf'), width = 6, height = 6)
print(p)
dev.off()
dt[dt$`E-value` == 1, ]$`E-value` <- NA
dt.eval <- MakeCategoriesMutExc(dt = dt, what = 'E-value', categories = eval.cutoffs, strict = T)
dt.eval$`E-value.bin` <- paste('<=', dt.eval$`E-value.bin`, sep = '')
dt.eval$`E-value.bin` <- factor(dt.eval$`E-value.bin`)
dt2 <- dt.eval[, c('ph.id', 'counts', 'intersection.type', 'experiment.type', 'E-value.bin', 'expression'), with = F]
counts.all <- as.data.table(aggregate(counts ~ experiment.type + intersection.type + `E-value.bin` + expression, data = dt2, FUN = sum))
write.table(counts.all, paste0('intersection_', what,  '_shuffle_', shuffle, '_', N.shuffle, '_db_', db, '_cutoff_evalue.tsv'), sep = '\t', row.names = F)
p <- PlotSpliceSites(counts.all, what. = what, bin = 'E-value.bin', colors. = eval.colors, shuffle, expression = expression)
print(p)
cairo_pdf(paste0('intersection_', what, '_shuffle_', shuffle, '_',  as.character(N.shuffle), '_db_', db, '_evalue_cutoffs', '.pdf'), width = 9, height = 5.7)
print(p)
dev.off()
dt.spread <- MakeCategoriesMutExc(dt = dt, what = 'spread', categories = spread.cutoffs)
dt.spread$spread.bin <- paste('<=', dt.spread$spread.bin, sep = '')
dt.spread$spread.bin <- factor(dt.spread$spread.bin)
dt2 <- dt.spread[, c('ph.id', 'counts', 'intersection.type', 'experiment.type', 'spread.bin', 'expression'), with = F]
counts.all <- as.data.table(aggregate(counts ~ experiment.type + intersection.type + spread.bin + expression, data = dt2, FUN = sum))
write.table(counts.all, paste0('intersection_', what,  '_shuffle_', shuffle, '_10_cutoff_spread.tsv'), sep = '\t', row.names = F)
p <- PlotSpliceSites(counts.all, what. = what, bin = 'spread.bin', colors. = spread.colors, shuffle, expression = expression)
print(p)
cairo_pdf(paste0('intersection_', what, '_shuffle_', shuffle, '_',  as.character(N.shuffle), '_spread_cutoffs', '.pdf'), width = 6, height = 6)
print(p)
dev.off()
path.to.ph <- '../python_scripts/folding_pretty_copy/out/hg19_ss_flanks/'
phs <- paste0(path.to.ph, '/panhandles_preprocessed_filtered_many_ph_removed.bed6')
N.shuffle <- 40
genes <- '../conservative_features/not_intersected_coding_genes.bed'
conins <- '../python_scripts/folding_pretty_copy/out/hg19_ss_flanks/intervals_with_seqs.bed'
evals <- paste0(path.to.ph, 'R_scape_estended_all_pretty.tsv')
# db = 'counts'
# what = 'exons'
# intervals <- '../exons/exons_K562.bed'
# for(shuffle in c('phs', 'genes')){
#   print(what)
#   print(shuffle)
#   DoIntesection(phs, genes, intervals, N.shuffle, what, shuffle, path.to.ph, conins, db)
#   DoIntesectioncutoffs(phs, genes, intervals, N.shuffle, what, shuffle, path.to.ph, db)
# }
db = 'simple'
shuffle = 'phs'
what = 'transcript_starts'
# tr starts and ends, energy
p <- PlotTypesCutoffsShuffleTypes(counts.all1 = paste0('intersection_', what = 'transcript_starts',  '_shuffle_', shuffle, '_', N.shuffle, '_db_', 'simple', '_cutoff_energy.tsv'),
counts.all2 = paste0('intersection_', what = 'transcript_ends',  '_shuffle_', shuffle, '_', N.shuffle, '_db_', 'simple', '_cutoff_energy.tsv'),
what. = what, bin = 'energy.bin', colors. = energy.colors,
facet.levels = c('transcript_starts', 'transcript_ends'),
facet.names = c('transcript starts', 'transcript ends'),
legend.pos. = 'none')
print(p)
cairo_pdf(paste0('intersection_', 'starts_ends_', '_shuffle_', shuffle, '_',  as.character(N.shuffle), '_db_', db, '_energy_cutoffs', 'many_phs_removed.pdf'), width = 9, height = 4.5)
print(p)
dev.off()
# tr starts and ends, evalue
p <- PlotTypesCutoffsShuffleTypes(counts.all1 = paste0('intersection_', what = 'transcript_starts',  '_shuffle_', shuffle, '_', N.shuffle, '_db_', 'simple', '_cutoff_evalue.tsv'),
counts.all2 = paste0('intersection_', what = 'transcript_ends',  '_shuffle_', shuffle, '_', N.shuffle, '_db_', 'simple', '_cutoff_evalue.tsv'),
what. = what, bin = 'E-value.bin', colors. = eval.colors,
facet.levels = c('transcript_starts', 'transcript_ends'),
facet.names = c('transcript starts', 'transcript ends'),
legend.pos. = 'none')
print(p)
cairo_pdf(paste0('intersection_', 'starts_ends_', '_shuffle_', shuffle, '_',  as.character(N.shuffle), '_db_', db, '_evalue_cutoffs', 'many_phs_removed.pdf'), width = 9, height = 4.5)
print(p)
dev.off()
what = 'polyA'
db = 'counts_20'
# CAGE and polyA evalue
p <- PlotTypesCutoffsShuffleTypes(counts.all1 = paste0('intersection_', what = 'CAGE',  '_shuffle_', shuffle, '_', N.shuffle, '_db_', 'counts', '_cutoff_evalue.tsv'),
counts.all2 = paste0('intersection_', what = 'polyA',  '_shuffle_', shuffle, '_', N.shuffle, '_db_', 'counts_20', '_cutoff_evalue.tsv'),
what. = what, bin = 'E-value.bin', colors. = eval.colors,
facet.levels = c('CAGE', 'polyA'),
facet.names = c('CAGE', 'poly(A) seq'),
legend.pos. = 'none')
print(p)
cairo_pdf(paste0('intersection_', 'CAGE_polyA_', '_shuffle_', shuffle, '_',  as.character(N.shuffle), '_db_', db, '_evalue_cutoffs', 'many_phs_removed.pdf'), width = 9, height = 4.5)
print(p)
dev.off()
#CAGE and polyA, energy
p <- PlotTypesCutoffsShuffleTypes(counts.all1 = paste0('intersection_', what = 'CAGE',  '_shuffle_', shuffle, '_', N.shuffle, '_db_', 'counts', '_cutoff_energy.tsv'),
counts.all2 = paste0('intersection_', what = 'polyA',  '_shuffle_', shuffle, '_', N.shuffle, '_db_', 'counts_20', '_cutoff_energy.tsv'),
what. = what, bin = 'energy.bin', colors. = energy.colors,
facet.levels = c('CAGE', 'polyA'),
facet.names = c('CAGE', 'poly(A) seq'),
legend.pos. = 'none')
cairo_pdf(paste0('intersection_', 'CAGE_polyA_', '_shuffle_', shuffle, '_',  as.character(N.shuffle), '_db_', db, '_energy_cutoffs', 'many_phs_removed.pdf'), width = 9, height = 4.5)
print(p)
dev.off()
print(p)
what = 'circRNA'
db ='TSCD_liver'
intervals <- '../circRNA/TSCD_liver.bed'
shuffle
shuffle = 'genes'
counts.all <- fread(paste0('intersection_', what,  '_shuffle_', shuffle, '_', N.shuffle, '_db_', db, '_cutoff_energy.tsv'))
p <- PlotTypesCutoffs(counts.all, what. = what, bin = 'energy.bin', colors. = energy.colors, shuffle = shuffle, need.title = F, legend.position. = 'none')
print(p)
PlotTypesCutoffs <- function(counts.all, what. = 'introns', bin = 'energy.bin', colors. = energy.colors,
shuffle, legend.position. = 'right', need.title = T){
fill.colors. <- adjustcolor(colors., alpha.f = 0.8)
names(fill.colors.) <- names(colors.)
tmp <- merge(subset(counts.all, experiment.type == 'real'),
subset(counts.all, experiment.type != 'real'),
by = c('intersection.type', bin))
tmp$ratio <- tmp$counts.x / tmp$counts.y
title. <-  if(shuffle == 'phs') 'Random shift' else 'Random gene'
if(!need.title) title. <- ''
g <- if(length(unique(counts.all$intersection.type)) == 1) ggplot(tmp, aes(y = ratio)) else ggplot(tmp, aes(y = ratio, x = intersection.type))
g <- g +
geom_boxplot(aes(fill = get(bin)), outlier.shape = NA, col = 'black') +
theme_linedraw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(text = element_text(size = 20),
axis.text.x = element_text(size = 15))  +
theme(legend.position = legend.position.) +
xlab('') +
ylab('enrichment') +
theme(plot.margin = margin(0,10,0,0)) +
geom_hline(yintercept = 1, col = 'darkred', linetype = "dashed") +
ggtitle(title.)
if(bin == 'energy.bin'){
g <- g +
scale_color_manual(values = colors., name = '\u0394G, kcal/mol') +
scale_fill_manual(values = fill.colors., name = '\u0394G, kcal/mol')
} else if(bin == 'spread.bin'){
g <- g +
scale_color_manual(values = colors., name = 'spread, nts') +
scale_fill_manual(values = fill.colors., name = 'spread, nts')
} else if(bin == 'E-value.bin'){
g <- g +
scale_color_manual(values = colors., name = 'E-value') +
scale_fill_manual(values = fill.colors., name = 'E-value')
}
if(what %in% c('exons', 'transcript_starts', 'transcript_ends', 'polyA', 'CAGE')){
g <- g + ylab('enrichment in PCCR')
} else if (what %in% c('cryptic_ss', 'branch_points')){
g <- g + ylab('enrichment in CCR')
} else if (what %in% c('introns', 'circRNA')){
g <- g + ylab('enrichment')
}
features <- list('Introns', 'Exons', 'Annotated transcripts', 'Annotated transcripts', 'Experimental data', 'Experimental data', 'Circular RNA', 'cryptic_ss', 'Branch points')
names(features) <- c('introns', 'exons', 'transcript_starts', 'transcript_ends', 'polyA', 'CAGE', 'circRNA', 'cryptic_ss', 'branch_points')
g <- g + ggtitle(features[[what]]) + theme(plot.title = element_text(hjust = 0.5))
g
}
p <- PlotTypesCutoffs(counts.all, what. = what, bin = 'energy.bin', colors. = energy.colors, shuffle = shuffle, need.title = F, legend.position. = 'none')
p
p <- PlotTypesCutoffs(counts.all, what. = what, bin = 'energy.bin', colors. = energy.colors, shuffle = shuffle, need.title = F, legend.position. = 'none')
print(p)
cairo_pdf(paste0('intersection_', what, '_shuffle_', shuffle, '_',  as.character(N.shuffle), '_db_', db, '_energy_cutoffs', '.pdf'), width = 5, height = 5)
print(p)
dev.off()
counts.all <- fread(paste0('intersection_', what,  '_shuffle_', shuffle, '_', N.shuffle, '_db_', db, '_cutoff_evalue.tsv'))
p <- PlotTypesCutoffs(counts.all, what. = what, bin = 'E-value.bin', colors. = eval.colors, shuffle = shuffle, need.title = F, legend.position. = 'none')
print(p)
cairo_pdf(paste0('intersection_', what, '_shuffle_', shuffle, '_',  as.character(N.shuffle), '_db_', db, '_evalue_cutoffs', '.pdf'), width = 7.5, height = 3.75)
print(p)
dev.off()
shuffle = 'phs'
what
shuffle = 'phs'
counts.all <- fread(paste0('intersection_', what,  '_shuffle_', shuffle, '_', N.shuffle, '_db_', db, '_cutoff_energy.tsv'))
p <- PlotTypesCutoffs(counts.all, what. = what, bin = 'energy.bin', colors. = energy.colors, shuffle = shuffle, need.title = F, legend.position. = 'none')
print(p)
cairo_pdf(paste0('intersection_', what, '_shuffle_', shuffle, '_',  as.character(N.shuffle), '_db_', db, '_energy_cutoffs', '.pdf'), width = 5, height = 5)
print(p)
dev.off()
# introns/exons evalue
p <- PlotTypesCutoffsShuffleTypes(counts.all1 = paste0('intersection_', what,  '_shuffle_', 'phs', '_', N.shuffle, '_db_', db, '_cutoff_evalue.tsv'),
counts.all2 = paste0('intersection_', what,  '_shuffle_', 'genes', '_', N.shuffle, '_db_', db, '_cutoff_evalue.tsv'),
what. = what, bin = 'E-value.bin', colors. = eval.colors,
facet.levels = c('Random shift', 'Random gene'), legend.pos. = 'none')
print(p)
cairo_pdf(paste0('intersection_', what, '_shuffle_', 'both', '_',  as.character(N.shuffle), '_db_', db, '_eval_cutoffs',
'many_phs_removed8.pdf'), width = 9, height = 4.5)
print(p)
dev.off()
path.to.ph <- '../python_scripts/folding_pretty_copy/out/hg19_ss_flanks/'
N.shuffle <- 40
genes <- '../conservative_features/not_intersected_coding_genes.bed'
conins <- '../python_scripts/folding_pretty_copy/out/hg19_ss_flanks/intervals_with_seqs.bed'
evals <- paste0(path.to.ph, 'R_scape_estended_all_pretty.tsv')
db = 'counts_GTEx'
what = 'cryptic_ss'
intervals <- '../cryptic_ss/cryptic_sites_GTEx_counts_filtered.bed'
shuffle = 'phs'
phs <- paste0(path.to.ph, '/panhandles_preprocessed_filtered_many_ph_removed.tsv')
counts.all <- fread(paste0('intersection_', what,  '_shuffle_', shuffle, '_10_cutoff_spread.tsv'))
PlotSpliceSites <- function(counts.all, what. = 'introns', bin = 'energy.bin', colors. = energy.colors, shuffle, expression = F){
if(expression){
tmp <- merge(subset(counts.all, experiment.type == 'real'),
subset(counts.all, experiment.type != 'real'),
by = c('intersection.type', bin, 'expression'))
} else{
tmp <- merge(subset(counts.all, experiment.type == 'real'),
subset(counts.all, experiment.type != 'real'),
by = c('intersection.type', bin))
}
tmp$ratio <- tmp$counts.x / tmp$counts.y
title. <-  if(shuffle == 'phs') 'Random shift' else 'Random gene'
fill.colors. <- adjustcolor(colors., alpha.f = 0.8)
names(fill.colors.) <- names(colors.)
g <- ggplot(tmp, aes(y = ratio)) +
geom_boxplot(aes(fill = get(bin)), outlier.shape = NA,  col = 'black') +
theme_linedraw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(text = element_text(size = 22),
axis.text.x = element_text(size = 17)) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
theme(strip.background = element_rect(color="black",
fill='white',
size=1.5, linetype="solid")) +
theme(strip.text.x = element_text(size = 17, color = "black")) +
theme(axis.title.x = element_blank()) +
ylab('enrichment in CCR') +
geom_hline(yintercept = 1, col = 'darkred', linetype = "dashed")
if(bin == 'spread.din'){
g <- g + theme(legend.position = c(0.8,0.8), plot.margin = margin(0,10,0,0))
} else{
g <- g + theme(legend.position = 'none')
}
#theme(legend.position = c(0.2,0.8), plot.margin = margin(0,10,0,0))
if(bin == 'energy.bin'){
g <- g +
scale_color_manual(values = colors., name = '\u0394G, kcal/mol') +
scale_fill_manual(values = fill.colors., name = '\u0394G, kcal/mol')
} else if(bin == 'spread.bin'){
g <- g +
scale_color_manual(values = colors., name = 'spread, nts') +
scale_fill_manual(values = fill.colors., name = 'spread, nts')
} else if(bin == 'E-value.bin'){
g <- g +
scale_color_manual(values = colors., name = 'e-value') +
scale_fill_manual(values = fill.colors., name = 'e-value')
}
if(expression){
g <- g + facet_wrap(.~expression)
}
g <- g + ggtitle('Splice sites') + theme(plot.title = element_text(hjust = 0.5))
g
}
p <- PlotSpliceSites(counts.all, what. = what, bin = 'spread.bin', colors. = spread.colors, shuffle, expression = expression)
print(p)
bin
View(counts.all)
PlotSpliceSites <- function(counts.all, what. = 'introns', bin = 'energy.bin', colors. = energy.colors, shuffle, expression = F){
if(expression){
tmp <- merge(subset(counts.all, experiment.type == 'real'),
subset(counts.all, experiment.type != 'real'),
by = c('intersection.type', bin, 'expression'))
} else{
tmp <- merge(subset(counts.all, experiment.type == 'real'),
subset(counts.all, experiment.type != 'real'),
by = c('intersection.type', bin))
}
tmp$ratio <- tmp$counts.x / tmp$counts.y
title. <-  if(shuffle == 'phs') 'Random shift' else 'Random gene'
fill.colors. <- adjustcolor(colors., alpha.f = 0.8)
names(fill.colors.) <- names(colors.)
g <- ggplot(tmp, aes(y = ratio)) +
geom_boxplot(aes(fill = get(bin)), outlier.shape = NA,  col = 'black') +
theme_linedraw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(text = element_text(size = 22),
axis.text.x = element_text(size = 17)) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
theme(strip.background = element_rect(color="black",
fill='white',
size=1.5, linetype="solid")) +
theme(strip.text.x = element_text(size = 17, color = "black")) +
theme(axis.title.x = element_blank()) +
ylab('enrichment in CCR') +
geom_hline(yintercept = 1, col = 'darkred', linetype = "dashed")
if(bin == 'spread.bin'){
g <- g + theme(legend.position = 'top')
} else{
g <- g + theme(legend.position = 'none')
}
#theme(legend.position = c(0.2,0.8), plot.margin = margin(0,10,0,0))
if(bin == 'energy.bin'){
g <- g +
scale_color_manual(values = colors., name = '\u0394G, kcal/mol') +
scale_fill_manual(values = fill.colors., name = '\u0394G, kcal/mol')
} else if(bin == 'spread.bin'){
g <- g +
scale_color_manual(values = colors., name = 'spread, nts') +
scale_fill_manual(values = fill.colors., name = 'spread, nts')
} else if(bin == 'E-value.bin'){
g <- g +
scale_color_manual(values = colors., name = 'e-value') +
scale_fill_manual(values = fill.colors., name = 'e-value')
}
if(expression){
g <- g + facet_wrap(.~expression)
}
g <- g + ggtitle('Splice sites') + theme(plot.title = element_text(hjust = 0.5))
g
}
p <- PlotSpliceSites(counts.all, what. = what, bin = 'spread.bin', colors. = spread.colors, shuffle, expression = expression)
print(p)
cairo_pdf(paste0('intersection_', what, '_shuffle_', shuffle, '_',  as.character(N.shuffle), '_spread_cutoffs', '.pdf'), width = 6, height = 6)
print(p)
dev.off()
path.to.ph <- '../python_scripts/folding_pretty_copy/out/hg19_ss_flanks/'
N.shuffle <- 40
genes <- '../conservative_features/not_intersected_coding_genes.bed'
conins <- '../python_scripts/folding_pretty_copy/out/hg19_ss_flanks/intervals_with_seqs.bed'
evals <- paste0(path.to.ph, 'R_scape_estended_all_pretty.tsv')
phs <- paste0(path.to.ph, '/panhandles_preprocessed_filtered_many_ph_removed_handles.bed6')
db = 'counts_GTEx'
what = 'cryptic_ss'
intervals <- '../cryptic_ss/cryptic_sites_GTEx_counts_filtered.bed'
shuffle = 'phs'
phs <- paste0(path.to.ph, '/panhandles_preprocessed_filtered_many_ph_removed.tsv')
counts.all <- fread(paste0('intersection_', what,  '_shuffle_', shuffle, '_', N.shuffle, '_db_', db, '_cutoff_energy.tsv'))
p <- PlotSpliceSites(counts.all, what. = what, bin = 'energy.bin', colors. = energy.colors, shuffle, expression = expression)
print(p)
cairo_pdf(paste0('intersection_', what, '_shuffle_', shuffle, '_',  as.character(N.shuffle), '_db_', db, '_energy_cutoffs', '.pdf'), width = 9, height = 4.5)
print(p)
dev.off()
path.to.ph <- '../python_scripts/folding_pretty_copy/out/hg19_ss_flanks/'
phs <- paste0(path.to.ph, '/panhandles_preprocessed_filtered_many_ph_removed.bed6')
N.shuffle <- 40
genes <- '../conservative_features/not_intersected_coding_genes.bed'
conins <- '../python_scripts/folding_pretty_copy/out/hg19_ss_flanks/intervals_with_seqs.bed'
evals <- paste0(path.to.ph, 'R_scape_estended_all_pretty.tsv')
what = 'circRNA'
db ='TSCD_liver'
intervals <- '../circRNA/TSCD_liver.bed'
shuffle = 'genes'
counts.all <- fread(paste0('intersection_', what,  '_shuffle_', shuffle, '_', N.shuffle, '_db_', db, '_cutoff_energy.tsv'))
p <- PlotTypesCutoffs(counts.all, what. = what, bin = 'energy.bin', colors. = energy.colors, shuffle = shuffle, need.title = F, legend.position. = 'none')
cairo_pdf(paste0('intersection_', what, '_shuffle_', shuffle, '_',  as.character(N.shuffle), '_db_', db, '_energy_cutoffs', '.pdf'), width = 5, height = 5)
print(p)
dev.off()
p <- PlotTypesCutoffs(counts.all, what. = what, bin = 'energy.bin', colors. = energy.colors, shuffle = shuffle, need.title = F, legend.position. = 'none')
print(p)
cairo_pdf(paste0('intersection_', what, '_shuffle_', shuffle, '_',  as.character(N.shuffle), '_db_', db, '_energy_cutoffs', '.pdf'), width = 9, height = 4.5)
print(p)
dev.off()
setwd('~/Desktop/cobrain/rscripts/')
path.to.folder.anno <- '../../dp/ngs/encodedcc/'
anno <- paste0(path.to.folder.anno, 'shRNA_hg19.txt')
pairs <- paste0(path.to.folder.anno, 'shRNA_hg19_control_pairs.txt')
path.to.folder <- '/uge_mnt/home/dp/ipsa/GRCh38/shRNA/A07/'
KD.anno <- fread(anno)
library(plyr)
library(dplyr)
library(qvalue)
library(stringr)
library(data.table)
KD.anno <- fread(anno)
ExtractIncExc <- function(path.to.folder, file){
if(file.info(paste0(path.to.folder, file, '.A07.gff'))$size != 0){
dt <- fread(paste0(path.to.folder, file, '.A07.gff'))
dt <- subset(dt, V3 == 'exon')
dt$inc <- as.numeric(gsub('inc', '', gsub('\\"', '', str_split_fixed(dt$V9, '; ', 5)[, 3])))
dt$exc <- as.numeric(gsub('exc', '', gsub('\\"', '', str_split_fixed(dt$V9, '; ', 5)[, 2])))
dt <- dt[, c('V1', 'V4', 'V5', 'V7', 'inc', 'exc'), with = F]
colnames(dt) <- c('chr', 'start', 'stop', 'strand', paste0('inc_', file), paste0('exc_', file))
return(dt)
} else{
return(NA)
}
}
dt <- fread('../eClip/hg38/HepG2.bed')
dt
dt[, RBP := str_split_fixed(V4, '_', 2)[, 1]]
dt[, V4 := paste(RBP, c(1:nrow(dt)), sep = '_')]
dt
dt[, RBP := NULL]
dt
fwrite(dt, '../eClip/hg38/HepG2.bed', sep = '\t', row.names = F, col.names = F, quote = F)
path.to.ph <- '../python_scripts/folding_pretty_copy/out/hg38/'
phs.track <- paste0(path.to.ph, 'panhandles_preprocessed_filtered_dGcutoff-15.bed')
phs.track
'../python_scripts/folding_pretty_copy/out/hg38/panhandles_preprocessed_filtered_energy_cutoff_-15.bed'
phs.data <- paste0(path.to.ph, '/panhandles_preprocessed_filtered.tsv')
phs.data
setwd('~/Desktop/cobrain/rscripts/')
setwd('Desktop/cobrain/PrePH/')
library(data.table)
dt <- fread('out/ryhb_bed3.csv')
dt
dt$sequences
dt$sequences[1]
dt$sequences <- gsub('U','T',dt$sequences)
dt$sequences
fwrite(dt, 'out/ryhb_bed3.csv', sep = '\t', row.names = F, col.names = F, quote = F)
dt <- fread('out/ryhb_bed3.csv')
dt
dt$sequences <- gsub('U','T',dt$sequences)
fwrite(dt, 'out/ryhb_bed3.csv', sep = '\t', row.names = F, col.names = T, quote = F)
